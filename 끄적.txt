1. 라이브러리
	- pom/xml , application.properties
2. 템플릿
4. entity 설계
5. entity, repository 작성
6. test 데이터 삽입 => repository 테스트
 simple CRUD
페이지 나누기 

목록처리
GET 방식 : /list?page=1&~~~~ 뒤가 기어지면 길어질수록 객체로 받으면 편해짐
페이지 나누기 정보(클라이언트 요청)를 저장하기 위한 객체 필요해짐 => pageRequestDto
화면에서 사용할 페이지 나누기 정보 저장 객체 => PageResultDto 

where 절 구문 변화
1. findBy~ : 동적 쿼리 어려움
2. @Query() : query 문을 직접 작성, 동적인 쿼리 작성은 어려움
3. QueryDSL : pom.xml에 DSL 라이브러리 추가
	1. QuerydslPredicateExecutor<Entity> 상속받기
		Q 클래스 사용 가능해짐 (Predicate) BooleanBuilder 타입
		sql 쿼리문을 메소드처럼 호출 가능해짐
	2. QuerydslRepositorySupport 상속받기



spring framework
spring boot

 => 내장톰캣
 => jar or war
	애플리케이션 개발하고 테스트 후 실제 운영 서버에 배포하기 위해 패키징 필요
	==> 웹 어플리케이션인 경우는 war 파일로 패키징 함
	==> jar : 일반 응용 프로그램 
 => 라이브러리 자동 관리(pom.xml)
 => spring framework 와 다르게 설정 자동화

 화면단 결정
=> jsp(default 아님)
=> thymeleaf ( html 확장자를 사용, jsp 유사)(우리는 이걸 화면단으로 쓰기로 함)
=> freemaker, groovy, mushache, ...;

프로젝트 구조
1) 자바파일 => src/main/java/기본패키지/

2) html, css, js => static/

3) templates => thymeleaf 파일

4) aplication.properties => 프로젝트 환경설정
   DB 설정, 서버 포트 변경, 로그 설정, ...;


실행은 *Application.java 들어가서 Run


스프링 부트에서 데이터베이스 연동
1) 스프링 jdbc // 잘 안씀
2) ORM 라이브러리 // 선택
	- Mybatis
	- hibernate // (일단 이걸 씀)

스프링 중요 개념
1. DI(Dependency Injection) : 의존성 주입
 - setter, 생성자를 이용한 객체 생성

==> 스프링 컨테이너가 필요한 객체를 필요한 시점에 주입해줌(IoC)
==> Inversion of Control(제어의 역전) // 지금까지 개발자가 제어하던 의존성 컨트롤을 스프링 컨테이너가 해줌


모든 요청은 컨트롤러에 경로가 있어야 함

스프링에서 직접적으로 파일 링크 불가능
<a href="index.html">index</a> / 이런거 불가능

대신 컨트롤러 경로지정
<a href="/">index</a>

스프링 프레임워크가 관리해주는 자바 클래스 = bean / 커피콩

@GetMapping("/login")
public void login() {
    void 타입 = 요청한 페이지로
}

@PostMapping("/login")
public String loginPost() {
    return "/member/info";
    String 타입 = return 에 써져있는 주소로 넘어감
}

post 는 form태그 있을때. 나머지는 get으로 받는다고 생각하는게 편한듯


데이터베이스 연동
1) JDBC 사용
----------------------
스프링 프레임워크
1) JDBC 사용  (X)
2) 스프링 DAO  (X)
3) 마이바티즈 
4) 하이버네이트 ORM (Object Rlational Mapping) : Java 의 Dto 와 DB의 Table이 같은 모양이기때문에 Dto만 만들어도 DB의 Table이 만들어짐
=> JPA(Java Persistence API) : ORM의 개념을 Java 언어에서 구현하기 위한 스펙
=> JPA를 구현한 구현체 : Hibernate
JPA 장점 : 데이터베이스 관련 코드에 대해 유연함을 얻을 수 있음
	- 데이터베이스 변경 시 SQL 변경/DAO/Service/화면까지 영향을 미치게되나, JPA를 이용 시 DB설계와 JAVA 설계를 한 번에 처리할 수 있음
	- 데이터베이스와 독립적 관계 - 특정 벤더의 데이터베이스에 종속적이지 않기 때문에 데이터베이스 제품이 변경되거나 버전이 변경되는 것과 같은 작업에서 자유로워질 수 있음
    단점 : 학습 곡선이 큼 - 기존의 데이터베이스 위주 학습에 비해 새롭게 배워야 할 부분이 많음
	근본적인 객체지향 설계 사상이 반영되어야 함 - JPA는'어떻게 적합한 객체들의 관계를 작성할 것인가?' 가 프로젝트의 성패를 좌우함 => 충분한 설계와 검토 과정 필요
	특정 데이터베이스의 강력함을 활용할 수 없음 - SQL 튜닝과 같은 작업에 제약이 생길 수 있음
JPA API - Entity, EntityManager
 데이터베이스에서의 Entity
 1) 데이터베이스 상에서 데이터로 관리하는 대상
 2) 상품, 회사, 직원 등과 같이 명사이면서 업무와 관련된 데이터
 3) 테이블 설계하고 데이터를 추가

 JPA 에서의 Entity
 1) Java를 이용해서 Entity를 관리
 2) 하나의 클래스를 작성

 EntityManager
 1) 여러 엔티티 객체들을 관리하는 역할 : LifeCycle 관리
	
1씩증가 시퀀스 만들기
 @SequenceGenerator(name = "memo_seq_gen", sequenceName = "memo_seq", allocationSize = 1)
 @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "memo_seq_gen")

.save() : insert, update


Tv tv = new LgTv(); Tv 클래스에 접근가능 LgTv에 접근하는게 아님


데이터 보내기
request.setAttribute("이름", 값) == model.addAttribute("page", page);
Model.addAttribute("이름", 값);
	th:text="${mDto.email}"
RedirectAttributes == path +="?bno="+bno;
	rttr.addAttribute("이름", 보내고싶은 데이터) => 파라메터로 전달 => ${param.*}
	th:text="${param.bno}"
	rttr.addFlashAttribute("이름", 값) => Sesstion을 이용해서 값을 저장 sesstion에 임시로 저장

기본타입 : 소문자 시작 / int, long, boolean, char, float, double, ... / null 대입 불가
객체타입 : 대문자 시작 / Integer, Long, Boolean, ... / null 대입 가능
기본타입은 no null 객체타입은 null 가능으로 설정됨
@Column(columnDefinition = "number(8)") // 컬럼 속성 정의


JPA 연관관계 종류
일대일 1 @OneToOne
일대다 2 @OneToMany
다대일 3 @ManyToOne
다대다 4 @ManyToMany

- DB의 경우 외래 키 하나로 양 쪽 테이블에 조인이 가능 -> 단방향 양방향 나눌 필요가 없어짐.
하지만 JPA의 경우 객체는 참조용 필드가 있는 객체만 다른 객체를 참조하는 것이 가능 -> 구 객체 사이에 하나의 객체에만 참조용 필드를 갖고 참조하면 단방향, 두 객체 모두가 각각 참조용 필드를 갖고 참조하면 양방향 관계이다.
1. 단방향 : 외래키는 Many 쪽에 존재, mappedBy는 many쪽에 주자



@~ToOne : 즉시 로딩 
@~TOMany : 지연 로딩
한쪽 테이블을 부를 때 거의 항상 사용된다면 즉시로딩 자주 안쓰이면 지연로딩으로 부르자.
(fetch = FetchType.LAZY) 지연 로딩이 권고사양임

영속성 전이 : CASCADE
1) 특정 엔티티를 영속 상태로 만들 때 연관된 엔티티도 함께 영속상태로 만듬



serviceImpl 을 먼저 만들고 나중에 추출해서 interface를 만들 수 있음
interface 에서 public default 을 붙여서 메소드를 만들면 메소드를 구현해서 내리는것이 가능함

* service를 만들었으면 serviceTest를 해보고, repository를 만들었으면 test를 해보자. *



객체지향 쿼리
1) JPQL(java persistence query languge)
2) 네이티브 SQL
3) QueryDSL : JPQL 을 편하게 작성하도록 도와주는 빌더 클래스 모음(비표준 오픈소스 프레임워크


QueryDSL
 쿼리를 문자가 아닌 코드로 작성해도 쉽고, 간결하며 모양도 쿼리와 비슷하게 개발
 다양한 상황에 맞게 쿼리를 생성해야 하는 경우 사용 -> 동적 쿼리

 Querydsl 사용하기
 1) QuerydslPredicateExecutor
 2) 사용자 정의 인터페이스 설계 후 QueryDsl

1) findBy~
2) @Query("select~")
3) Querydsl 사용 entity쪽에서 dsl 상속받고
Repository에서 상속받기 QuerydslPredicateExecutor<Book>

## boot
@Log4j2
@Component : 스프링 컨테이너가 관리가 필요한 모든 객체에 사용(Controller, Service 의 부모)
@Controller : 컨트롤러 클래스 위에 설정 / 스프링 컨테이너가 해당 클래스의 객체를 생성(new 객체 를 따로 쓸 필요가 없어짐) 알아서 관리해줌 (제어의 역전 IoC)
@Service : 서비스 클래스 위에 설정 / 스프링 컨테이너가 해당 클래스의 객체를 생성한 후 관리 해줌

@RequestMapping : (value = "/경로", method = RequestMethod.GET:방식post, get) / 경로 지정(예전 버전) / 컨트롤러에 달아서 전체경로달음
@GetMapping("/경로") : @RequestMapping 의 GET 간략화
@PostMapping("/경로") : @RequestMapping 의 POST 간략화
@RequestParam(value = "name", defaultValue = "0") int num1 ==> num1 = ("name") / request에서 넘어오는 파라메터의 이름 지정할 때 사용
@ModelAttribute("이름") : Dto 객체 이름 지정
			==  model.addAttribute("page", page); == servlet 에서 forword로 보낼때 쓰던 setAttribute와 같음

@SpringBootTest : 테스트 전용 클래스
@Test // 테스트 메소드(리턴타입은 void)
@Autowired = 객체 주입(생성된 객체 넣어줘) / interface클래스 를 구현 클래스를 따로 만들지 않아도 쓸 수 있도록 해줌
 - 객체 생성해서 스프링 컨테이너가 자지고 있음
@Table(name = "membertbl", uniqueConstraints = { // 제약조건 유니크함(name, age) 중복불가
        @UniqueConstraint(name = "NAME_AGE_UNIQUE", columnNames = { "name", "age" }) })
 => 테이블 명 / 제약조건 거는법
@Enumerated(EnumType.STRING) // check (role_type in ('ADMIN','USER')) : Column안에 들어가는 값이 정해져있는 경우 , 클래스를 만들어서 값을 지정해둠
@Lob // 대용량 데이터 담기

(bootsource에 jpa쪽 참고) / main
@EnableJpaAuditing - jpaApplication에 달아줌 / Auditing 이 발생하도록 함
-> abstract BaseEntity 클래스 만들고
@EntityListeners(value = AuditingEntityListener.class) / Auditing이 발생했는지 감지
@MappedSuperclass / BaseEntity 상속할 경우 필드를 컬럼으로 인식하기
멤버변수 - 
@CreatedDate
@LastModifiedDate
-> 생성날자와 수정날자를 자동을 달아주고 싶은 클라스에 상속시킴

@OneToMany같은 조인에 씀 cascade = CascadeType.ALL
orphanRemoval = true -> 부모 엔티티와 연관 관계가 끊어진 자식 엔티티를 자동으로 삭제하는 기능제공

@Transactional : fetch = FetchType.LAZY 일때 쓸만함

@DynamicInsert : 데이터가 존재하는 필드만으로 insert sql 문 생성 / @ColumnDefault("0")와 같이 사용하여 default 값을 넣을 수 있음


@Controller , @Service => 프레임 워크가 관리하는 객체라고 알려줌 -> 프레임 워크가 객체를 생성하고 가지고있게됨 -> 필요한 시점에 알아서 생성한 객체를 사용해줌

@Valid DTO -> dto에 검증조건을 맞춰서 검증해줌
th:object="${컨트롤러에 있는 클래스 이름}"

@Valid GuestBookDto guestBookDto, BindingResult result / 순서 지켜야함 @Valid (DTO 유효성검증 하고 앞으로 넘기기), BindinResult

##lombok##
@Data
@Builder
@RequiredArgsConstructor / @NotNull, final 이 붙은 멤버변수를 대상으로 생성자 생성
@Builder.Default // 필드에 기본값으로 빈 ArrayList가 할당
@Embeddable : 다른 엔티티에 포함되는 엔티티임

##Thymeleaf##
th:text="" 따음표 안에있는 태그는 해석하지 않음
th:utext="" 따음표 안에있는 태그까지 해석함
th:each="dtoList : ${list}" => foreach 구문

시간 표현 th:text="${#temporals.format(dtoList.regTime, 'yyyy-MM-dd hh:mm:ss')}"

th:if="${dtoList.id % 5 == 0}" 조건문 if
<li th:each="dtoList : ${list}" th:text="${dtoList.id % 5 == 0}?${'---------' + dtoList.id}:${dtoList.first}"></li> 사막연산자 가능
th:switch="${state.even}"
th:case="true" switch case도 있음
스크립트에서 Thymeleaf
    <script>
      const result = "[[${result}]]";
    </script>
또는 <script th:inline="javascript">
	const result = [[${result}]]
     </script>
th:href="@{/sample/ex1(id=${dtoList.id})}" => /sample/ex1?id=1 / a태그 get방식으로 데이터 넘김

div th:fragment="header" / 레이아웃 나누기 / 이름정하는거니까 ${}쓰지 않음
th:insert="~{fragments/separate :: content}" == jsp에서 includ / 나눈 레이아웃 포함시키기
th:replace="~{fragments/separate :: header}" => insert랑 같은데 replace를 쓴 태그를 없애고 들어옴

layout:fragment="이름" / html 상단에 xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout" layout:decorate="~{/layouts/layout}" 들어가있으면 /layouts/layout 의 layout:fragment="이름" 과 같은 자리에 들어감 

<th:block></th:block> : 의미는 없고 Thymeleaf 템플릿 엔진이 템플릿을 처리하는 동안 구문을 그룹화하고 제어 구조를 나타내기 위해 사용
th:object="${memberDto}" :  데이터를 템플릿에 바인딩하여 동적으로 렌더링할 수 있도록 합니다.

@Length(min = 2, max = 6)
@Email
@NotEmpty
@NotBlank

th:if="${dto.important}" if 안쪽이 1(true) 라면 text 표시해줌
th:if 속성은 해당 조건이 참일 때만 해당 요소를 렌더링하도록 지정함, false 일때는 요소 전체가 안보임
th:checked 속성은 completed 필드의 값에 따라 체크박스가 체크되거나 체크되지 않도록 합니다

